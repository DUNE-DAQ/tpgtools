@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

find_dependency(ers REQUIRED)
find_dependency(logging REQUIRED)
find_dependency(readoutlibs REQUIRED)
find_dependency(fdreadoutlibs REQUIRED)
find_dependency(daqdataformats REQUIRED)
find_dependency(detchannelmaps REQUIRED)
find_dependency(detdataformats REQUIRED)
find_dependency(fddetdataformats REQUIRED)
find_dependency(trigger REQUIRED)
find_dependency(hdf5libs REQUIRED)

# Figure out whether or not this dependency is an installed package or
# in repo form

if (EXISTS ${CMAKE_SOURCE_DIR}/@PROJECT_NAME@)

message(STATUS "Project \"@PROJECT_NAME@\" will be treated as repo (found in ${CMAKE_SOURCE_DIR}/@PROJECT_NAME@)")
add_library(@PROJECT_NAME@::@PROJECT_NAME@ ALIAS @PROJECT_NAME@)

set(@PROJECT_NAME@_DAQSHARE "${CMAKE_CURRENT_LIST_DIR}")

else()

message(STATUS "Project \"@PROJECT_NAME@\" will be treated as installed package (found in ${CMAKE_CURRENT_LIST_DIR})")
set_and_check(targets_file ${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake)
include(${targets_file})

set(@PROJECT_NAME@_DAQSHARE "${CMAKE_CURRENT_LIST_DIR}/../../../share")

endif()

check_required_components(@PROJECT_NAME@)